MODEL,
data=stanDataList,
pars       = c('mu','eps_t','eps_f',
'mu', 'theta','betax',
'sigma_t','sigma_f'),
init       = stanInits(nchains),
iter       = niter,
warmup     = nwarmup,
thin       = nthin,
chains     = nchains,
control = list(stepsize=.10, max_treedepth=15)
)
#
# alpha = as.matrix(fit, 'gamma_alpha') %*% t(Z_alpha)
# delta = as.matrix(fit, 'gamma_delta') %*% t(Z_delta)
#
# desc = paste(  c('notronco','tronco')[inc_tronco+1],
#                c('nofamily','family')[inc_family+1],
#                c('noliteracy','literacy')[inc_literacy+1],
#                sep='-')
#
# fname = paste0('../Data/IUSSP fit ',desc,  format(Sys.time(), ' %Y-%m-%d-%H%M')  ,'.RData')
#
# if (!testing) save(fit, alpha, delta, keepers, file=fname)
#
get_elapsed_time()
get_elapsed_time(fit)
sum(get_elapsed_time(fit))
sum(get_elapsed_time(fit))/60
summary(fit)
head( summary(fit) )
summary(fit, 'sigma_t')
print(fit, 'sigma_t')
print(fit, 'sigma_t', digits=4)
print(fit, 'sigma_f', digits=4)
print(fit, 'betax', digits=4)
stan_hist(fit,'betax')
library(shinystan)
launch_shinystan(fit)
stan_trace(fit, 'theta[1]')
stan_trace(fit, paste0('theta[', sample(R,8),']'))
stan_trace(fit, paste0('theta[', sample(R,4),']'))
stan_trace(fit, paste0('theta[', sample(R,4),']')) + ylim(1,9)
stan_trace(fit, paste0('theta[', sample(R,4),']')) + ylim(1,9) + geom_hline(yintercept=seq(1,9,2),lty=2)
keepers[3]
terra.mun
keepers[3]
stan_trace(fit, paste0('theta[', sample(R,4),']')) + ylim(1,9) + geom_hline(yintercept=seq(1,9,2),lty=2)
stan_trace(fit, paste0('theta[', sample(R,4),']')) + ylim(1,9) + geom_hline(yintercept=seq(0,10,2.5),lty=2)
print(fit, 'theta[198')
print(fit, 'theta[198]')
head(families_in_terra)
fam2tronco
table(fam2tronco)
sample( which(fam2tronco==1), 5)
sapply(1:4, function(k) sample(which(fam2tronco==k),5))
lapply(1:4, function(k) sample(which(fam2tronco==k),5))
sapply(1:4, function(k) sample(which(fam2tronco==k),5)) %>% unlist()
sapply(1:4, function(k) sample(which(fam2tronco==k),5)) %>% as.vector()
sapply(1:4, function(k) sample(which(fam2tronco==k),5)) %>% as.vector() %>% sort()
sapply(1:4, function(k) sample(which(fam2tronco==k),5)) %>% as.vector() %>% sort() -> if
sapply(1:4, function(k) sample(which(fam2tronco==k),5)) %>% as.vector() %>% sort() ->
sel
Hf[,sel]
colSums( Hf[,sel])
colSums( Hf[,sel] > 0)
rowSums( Hf[,sel] > 0)
table( rowSums( Hf[,sel] > 0))
sapply(1:4, function(k) sample(which(fam2tronco==k),3)) %>% as.vector() %>% sort() ->
sel
table( rowSums( Hf[,sel] > 0))
sapply(1:4, function(k) sample(which(fam2tronco==k),3)) %>% as.vector() %>% sort() ->
sel
q()
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( rpois(n*4, 50), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + rnorm(n, mean=0, sd=10)
return(data.frame(Y,X))
}
make_new_sample(n=10)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( rpois(n*4, 50), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + rnorm(n, mean=0, sd=10)
return(data.frame(Y,X))
}
make_new_sample(n=10)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( rpois(n*4, 50), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + rnorm(n, mean=0, sd=10)
return(data.frame(Y,X))
}
make_new_sample(n=10)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( rpois(n*4, 50), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10), 1)
return(data.frame(Y,X))
}
make_new_sample(n=10)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10), 1)
return(data.frame(Y,X))
}
make_new_sample(n=10)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
fit = lm( this.sample[,1] ~ this.sample[, 2:(K+1)])
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
SSR( samp, K=2)
head(samp)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
if (K=1) fit = lm( Y ~ X1, data=this.sample)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
SSR( samp, K=2)
SSR( samp, K=4)
---
title: "Adding irrelevant X variables: F tests"
output: html_notebook
---
Suppose that
* you have data on one $Y$ variable and four possible $X$ variables
* the true model for $(Y,X_1,X_2,X_3,X_4) is $E(Y|X_1\ldots X_4) = \beta_0 + \beta_1 X_1 + \beta_2 X_2$
The point is that $X_3$ and $X_4$ have **no ceteris paribus effects** on $Y$: they do not belong in the correct model.
Another way to say this is that in a model that included all four $X$ variables, the true coefficients for $X_3$ and $X_4$ are zero:
$$
Y = \beta_0 + \beta_1 X_1 +  \beta_2 X_2 + [\mathbf{0}] X_3 + [\mathbf{0}] X_4+ u
$$
In $R$, we can simulate a data set from this model as follows:
```{r}
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
```
For example, small samples with $n=10$ might look like these
```{r}
make_new_sample(n=10)
```
We can also write an $R$ function to estimate the regression model with the first $K$ variables and report the SSR:
```{r}
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
restricted.ssr   = SSR( samp, K=2)
unrestricted.ssr = SSR( samp, K=4)
```
Now we
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
restricted.ssr   = SSR( samp, K=2)
unrestricted.ssr = SSR( samp, K=4)
restricted.ssr
unrestricted.ssr
restricted.ssr - unrestricted.ssr
(restricted.ssr - unrestricted.ssr) / unrestricted.ssr
(restricted.ssr - unrestricted.ssr) / unrestricted.ssr * (1000-4-1)/2
curve(dF(x,23,1), from=0, to=8)
curve(df(x,23,1), from=0, to=8)
curve(df(x,23,4), from=0, to=8)
curve(df(x,13,2), from=0, to=8)
qf( .99, 2, Inf)
pf( 2.53, 2, Inf)
1-pf( 2.53, 2, Inf)
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
SSR( samp, K=2)
SSR( samp, K=4)
SSR( samp, K=2)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
SSR( samp, K=2)
SSR( samp, K=4)
make_new_sample = function(n=1000) {
# some (arbitrary) values for the betas that matter
beta0 = 30
beta1 = 1
beta2 = 3
# some random X1...X4 values
X = matrix( round(runif(n*4, min=0, max=60)), nrow=n, ncol=4)
Y = beta0 + beta1 * X[,1] + beta2 * X[,2] + round( rnorm(n, mean=0, sd=10))
return(data.frame(Y,X))
}
make_new_sample(n=10)
SSR = function( this.sample, K) {
if (K==1) fit = lm( Y ~ X1, data=this.sample)
if (K==2) fit = lm( Y ~ X1 + X2, data=this.sample)
if (K==3) fit = lm( Y ~ X1 + X2 + X3, data=this.sample)
if (K==4) fit = lm( Y ~ X1 + X2 + X3 + X4, data=this.sample)
uhat = residuals(fit)
return( sum(uhat^2))
}
samp = make_new_sample(n=1000)
SSR( samp, K=2)
SSR( samp, K=4)
Fstat = function(this.sample) {
n     = nrow(this.sample)
ssr_u = SSR(this.sample, K=4)
ssr_r = SSR(this.sample, K=2)
F_act = (ssr_r - ssr_u)/ ssr_u * (n-4-1)/2
}
Fstat(samp)
Fstat = function(this.sample) {
n     = nrow(this.sample)
ssr_u = SSR(this.sample, K=4)
ssr_r = SSR(this.sample, K=2)
F_act = (ssr_r - ssr_u)/ ssr_u * (n-4-1)/2
}
Fstat(samp)
hist(Fact, breaks=seq(from=0,to=10,by=.10)
)
Fact = rep(NA, 10000)
for (i in 1:10000) {
this.sample = make_new_sample(n=100)
Fact[i] = Fstat(this.sample)
}
hist(Fact, breaks=seq(from=0,to=10,by=.10))
hist(Fact, breaks=c(seq(from=0,to=10,by=.10),Inf)
)
hist(Fact, breaks=seq(from=0,to=10,by=.10, right=FALSE)
.10
hist(Fact, breaks=seq(from=0,to=10,by=.10), right=FALSE)
hist(Fact, breaks=seq(from=0,to=10,by=.10), right=FALSE, xlim=c(0,10))
hist(Fact, breaks=40, right=FALSE, xlim=c(0,10))
hist(Fact, breaks=100, right=FALSE, xlim=c(0,10))
hist(Fact, breaks=200, right=FALSE, xlim=c(0,10))
hist(Fact, breaks=100, right=FALSE, xlim=c(0,10),
main='Simulated Distribution of F_act when H0 is true')
quantile(Fact,.95)
hist(Fact, breaks=500, right=FALSE, xlim=c(0,10),
main='Simulated Distribution of F_act when H0 is true')
hist(Fact, breaks=200, right=FALSE, xlim=c(0,10),
main='Simulated Distribution of F_act when H0 is true')
curve(10000* df(x,2,Inf), from=0, to=10, col=2)
hist(Fact, breaks=.05, right=FALSE, xlim=c(0,10),
main='Simulated Distribution of F_act when H0 is true')
hist(Fact, breaks=200, right=FALSE, xlim=c(0,10),
main='Simulated Distribution of F_act when H0 is true')
curve(500* df(x,2,Inf), from=0, to=10, col=2, lwd=3, add=TRUE)
hist(Fact, breaks=200, right=FALSE, xlim=c(0,10),
main='Simulated Distribution of F_act when H0 is true')
curve(500* df(x,2,Inf), from=0, to=10, col=2, lwd=3, add=TRUE)
hist(Fact, breaks=200, right=FALSE, xlim=c(0,10),
main='Simulated and Theoretical Distribution of F_act\nwhen H0 is true')
curve(10000/200* df(x,2,Inf), from=0, to=10, col=2, lwd=3, add=TRUE)
curve(10000/20* df(x,2,Inf), from=0, to=10, col=2, lwd=3, add=TRUE)
hist(Fact, breaks=200, right=FALSE, xlim=c(0,10),
main='Simulated and Theoretical Distribution of F_act\nwhen H0 is true')
curve(500* df(x,2,Inf), from=0, to=10, col=2, lwd=3, add=TRUE)
q5_est = .03
ab = LearnBayes::beta.select( list(x= min(q5_est)/2, p=.05),
list(x= 2*max(q5_est), p=.95))
ab
curve( dbeta(x, 5.87, 164.92))
curve( dbeta(x, 5.87, 164.92), from=0, to=.10)
abline(v=q5_est)
abline(v=q5_est, col='red')
data.frame( q5= rbeta(5000, 5.87, 164.92))
data.frame( q5= rbeta(5000, 5.87, 164.92), k=rnorm(5000), beta1=rnorm(5000), beta2=rnorm(5000))
data.frame( q5= rbeta(5000, 5.87, 164.92), k=rnorm(5000), beta1=rnorm(5000), beta2=rnorm(5000)) -> sss
head(sss)
plot(density(sss$q5))
plot(density(sss$q5, adjust=1.5))
curve(dbeta(x, 5.87, 164.92), col='red', add=TRUE)
mutate(sss[1:5,], bigF = bigF(3,c(beta1,beta2)))
library(dplyr)
mutate(sss[1:5,], bigF = bigF(3,c(beta1,beta2)))
bigF = function(TFR,beta) {
gamma = as.vector( m + X %*% beta)    # log odds rel to F15
phi   = exp(gamma) / sum(exp(gamma))  # proportion of lifetime fertil by age group
result = c(0, TFR/5 * phi)
names(result) = seq(10,45,5)
return(result)
} # bigF
mutate(sss[1:5,], bigF = bigF(3,c(beta1,beta2)))
m = c(0, 1.39212, 1.59237, 1.22909, 0.4523, -0.88676, -3.43722)
names(m) = seq(15,45,5)
X = matrix( c(0, 0.27443, 0.54078, 0.73193, 0.87739, 1.04049,  1.51719,
0, 0.31782, 0.51079, 0.51072, 0.34831, 0.05289, -0.72364),
nrow=7,ncol=2)
rownames(X) = seq(15,45,5)
mutate(sss[1:5,], bigF = bigF(3,c(beta1,beta2)))
tail(sss)
y = rnorm(10000, 2, 5)
y
mean( 2*y^2 - 10)
y = rnorm(10000, 2, 5)
mean(y)
sd(y)
mean( 2*y^2 - 10)
y = rnorm(100000, 2, 5)
mean( 2*y^2 - 10)
y = rnorm(100000, 2, 5)
mean( 2*y^2 - 10)
sd( 4*y + 1000)
(sd( 4*y + 1000))^2
q()
read.sv(df, file='big test of alternative priors.csv')
read.csv(df, file='big test of alternative priors.csv')
setwd("~/GitHub/Child-Woman-Ratio")
read.csv(df, file='big test of alternative priors.csv')
dir()
df = read.csv(file='big test of alternative priors.csv')
df
base = df %>%
group_by(county,quantile) %>%
summarize(Q = value[1])
head(base)
## for legacy reasons, create a copy of the priors factor with difft levels
df$cat = df$priors
levels(df$cat) = c('text','EMPIRICAL','IDBHIV')
alt1 = df %>%
filter(cat=='EMPIRICAL') %>%
select(county, quantile, value,cat) %>%
rename(Qalt = value)
new1 = left_join(base, alt1, by=c('county','quantile'))
alt2 = df %>%
filter(cat=='IDBHIV') %>%
select(county, quantile, value,cat) %>%
rename(Qalt = value)
new2 = left_join(base, alt2, by=c('county','quantile'))
plot.df = rbind( new1, new2) %>%
arrange(county,quantile,cat) %>%
mutate(quantile = paste0(quantile,'%ile'),
cat = paste('Alternative prior =',cat))
library(tidyverse)
base = df %>%
group_by(county,quantile) %>%
summarize(Q = value[1])
head(base)
## for legacy reasons, create a copy of the priors factor with difft levels
df$cat = df$priors
levels(df$cat) = c('text','EMPIRICAL','IDBHIV')
alt1 = df %>%
filter(cat=='EMPIRICAL') %>%
select(county, quantile, value,cat) %>%
rename(Qalt = value)
new1 = left_join(base, alt1, by=c('county','quantile'))
alt2 = df %>%
filter(cat=='IDBHIV') %>%
select(county, quantile, value,cat) %>%
rename(Qalt = value)
new2 = left_join(base, alt2, by=c('county','quantile'))
plot.df = rbind( new1, new2) %>%
arrange(county,quantile,cat) %>%
mutate(quantile = paste0(quantile,'%ile'),
cat = paste('Alternative prior =',cat))
plot.df
cairo_ps(file='big-test-of-alternative-priors.eps', width=11, height=8)
ggplot(data=filter(plot.df, county < 160), aes(x=Q, y=Qalt)) +
geom_point(col='red',shape=16, size=2, fill='red',alpha=.50) +
geom_abline(intercept=0, slope=1) +
theme_bw() +
theme(axis.title=element_text(face='bold',size=14),
strip.text=element_text(face='bold',size=12)) +
facet_wrap(cat ~ quantile) +
labs(x='Posterior Quantile: Proposed prior',
y='Posterior Quantile: Alternative prior')
dev.off()
